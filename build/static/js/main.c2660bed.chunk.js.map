{"version":3,"sources":["Service/proxy.ts","Helpers/events.ts","Controller/TextInput.tsx","Login/Login.tsx","Controller/TextInputAndButton.tsx","Main/ConversationCard.tsx","Main/LeftPane.tsx","Main/MessageCard.tsx","Main/RightPane.tsx","Main/Main.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["proxy","ws","inbox","WebSocket","addEventListener","e","p","JSON","parse","data","console","log","type","alert","message","dispatch","cid","channelId","conversations","find","x","lastMessages","push","conversation","packet","stringify","this","send","listeners","listener","obj","splice","findIndex","l","args","filter","call","Error","TextInput","state","value","props","focus","attrs","autofocus","autoFocus","onEnter","onKeyDown","KeyCode","className","onChange","setState","target","onBlur","onFocus","placeholder","Component","Login","email","password","displayName","register","name","createRef","src","width","current","onClick","ref","href","preventDefault","sendPackage","staySignedIn","TextInputAndButton","textInput","buttonContent","ConversationCard","lastMessage","length","onSelect","Date","timeStamp","toLocaleDateString","content","m","forceUpdate","removeAllEventListener","LeftPane","user","tag","text","sendContactRequest","map","key","selected","selectedConversation","firstMessage","c","MessageCard","own","toLocaleTimeString","PureComponent","RightPane","referenceTo","contentType","onBack","id","senderId","onSend","Main","undefined","App","loggedIn","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","catch","error","ReactDOM","render","StrictMode","document","getElementById","URL","process","origin","fetch","headers","response","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.c2660bed.chunk.js","sourcesContent":["import { InboxDto, IncomingPacket, OutgoingPacket, MessageDto } from \"./chat\";\r\nimport { EventProducer } from \"../Helpers/events\";\r\n\r\ninterface ProxyEventMap {\r\n    \"login\": () => void;\r\n    \"message\": (channelId: string, message: MessageDto) => void;\r\n    \"conversation\": (channelId: string) => void;\r\n}\r\n\r\nclass Proxy extends EventProducer<ProxyEventMap> {\r\n    private ws: WebSocket\r\n    inbox: InboxDto | null = null;\r\n\r\n    constructor() {\r\n        super();\r\n\r\n        this.ws = new WebSocket(\"wss://raja.aut.bme.hu/chat/\");\r\n        this.ws.addEventListener(\"message\", e => {\r\n            let p = <IncomingPacket>JSON.parse(e.data);\r\n            console.log(p);\r\n\r\n            switch (p.type) {\r\n                case \"error\":\r\n                    alert(p.message);\r\n                    break;\r\n                case \"login\":\r\n                    this.inbox = p.inbox;\r\n                    this.dispatch(\"login\");\r\n                    break;\r\n                case \"message\":\r\n                    let cid = p.channelId;\r\n                    this.inbox!.conversations.find(x => x.channelId === cid)?.lastMessages.push(p.message);\r\n                    this.dispatch(\"message\", cid, p.message);\r\n                    break;\r\n                case \"conversationAdded\":\r\n                    this.inbox!.conversations.push(p.conversation);\r\n                    this.dispatch(\"conversation\", p.conversation.channelId);\r\n                    break;\r\n            }\r\n        });\r\n    }\r\n\r\n    sendPackage(packet: OutgoingPacket) {\r\n        let p = JSON.stringify(packet);\r\n        console.log(p);\r\n        this.ws.send(p);\r\n    }\r\n}\r\n\r\nexport var proxy = new Proxy();","export class EventProducer<M> {\r\n    private listeners: { type: keyof M, listener, obj?: Object }[] = [];\r\n\r\n    addEventListener<K extends keyof M>(type: K, listener: M[K], obj?: Object) {\r\n        this.listeners.push({ type, listener, obj });\r\n    }\r\n\r\n    removeEventListener<K extends keyof M>(type: K, listener: M[K]) {\r\n        this.listeners.splice(this.listeners.findIndex(l => l.type === type && l.listener === listener), 1);\r\n    }\r\n\r\n    protected dispatch<K extends keyof M>(type: K, ...args) {\r\n        for (let listener of this.listeners.filter(l => l.type === type)) {\r\n            listener.listener.call(listener.obj, ...args);\r\n        }\r\n    }\r\n\r\n    removeAllEventListener(obj: Object) {\r\n        if (!obj)\r\n            throw new Error(\"Must specify object\");\r\n        this.listeners = this.listeners.filter(l => l.obj !== obj);\r\n    }\r\n}","import { Component } from \"react\";\r\nimport React from \"react\";\r\n\r\nimport './TextInput.css'\r\n\r\nexport interface TextInputOptions {\r\n    value?: string;\r\n    onChange?: (value: string) => void;\r\n    type?: \"text\" | \"password\" | \"email\";\r\n    placeholder?: string;\r\n    onEnter?: () => void;\r\n    autofocus?: boolean;\r\n}\r\n\r\nexport class TextInput extends Component<TextInputOptions> {\r\n    state = { value: this.props.value, focus: false };\r\n\r\n    render() {\r\n        let attrs = {} as any;\r\n        if(this.props.autofocus)\r\n            attrs.autoFocus = true;\r\n        if(this.props.onEnter)\r\n            attrs.onKeyDown = e => {\r\n                if(e.KeyCode === 13)\r\n                    this.props.onEnter!();\r\n            };\r\n\r\n        return (\r\n            <div className=\"text-input\">\r\n                <input {...attrs} type={this.props.type ?? \"text\"} value={this.state.value}\r\n                    onChange={e => {\r\n                        this.setState({ value: e.target.value });\r\n                        this.props.onChange?.(e.target.value);\r\n                    }}\r\n                    onBlur={() => this.setState({ focus: false })}\r\n                    onFocus={() => this.setState({ focus: true })} />\r\n                <div className=\"focus-indicator\"></div>\r\n                <label className={this.state.value || this.state.focus ? \"subsided\" : \"\"}>\r\n                    {this.props.placeholder}\r\n                </label>\r\n            </div>\r\n        )\r\n    }\r\n}","import { Component, createRef } from \"react\";\r\nimport React from \"react\";\r\nimport { proxy } from \"../Service/proxy\";\r\nimport { TextInput } from \"../Controller/TextInput\";\r\n\r\nexport class Login extends Component {\r\n    state = { email: \"\", password: \"\", displayName: \"\", register: false };\r\n    name = createRef<TextInput>();\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"login\">\r\n                <img src=\"logo512.png\" width=\"256\" />\r\n                <TextInput type=\"email\" placeholder=\"Email (someone@example.com)\" value={this.state.email} onChange={e => {\r\n                    this.setState({ email: e });\r\n                    if (e === \"hnn9ga\" || e === \"HNN9GA\") {\r\n                        this.setState({ displayName: \"Bálint\" });\r\n                        this.name.current?.setState({value: \"Bálint\"});\r\n                    }\r\n                }} onEnter={() => this.onClick()} autofocus={true} />\r\n                <TextInput type=\"password\" placeholder=\"Password\" value={this.state.password} onChange={e => this.setState({ password: e })} onEnter={() => this.onClick()} autofocus={false} />\r\n                {this.state.register && <TextInput type=\"text\" ref={this.name} placeholder=\"Display Name (AgentSmith)\" value={this.state.displayName} onChange={e => this.setState({ displayName: e })} onEnter={() => this.onClick()} autofocus={false} />}\r\n\r\n                <button type=\"button\" onClick={() => this.onClick()}>{this.state.register ? \"Register\" : \"Login\"}</button>\r\n                <p>\r\n                    {this.state.register ? \"Switch back to \" : \"Have no account yet? Go and \"}\r\n                    <a href=\"\" onClick={e => { e.preventDefault(); this.setState({ register: !this.state.register }); }}>\r\n                        {this.state.register ? \"Login\" : \"Register\"}\r\n                    </a>\r\n                </p>\r\n                <a href=\"https://www.google.hu/search?q=privacy\">Privacy Policy</a>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    onClick() {\r\n        if (this.state.register) {\r\n            proxy.sendPackage({ type: \"register\", email: this.state.email, password: this.state.password, displayName: this.state.displayName, staySignedIn: false });\r\n        } else {\r\n            proxy.sendPackage({ type: \"login\", email: this.state.email, password: this.state.password, staySignedIn: false });\r\n        }\r\n    }\r\n}","import { TextInput, TextInputOptions } from \"./TextInput\";\r\nimport { Component, createRef } from \"react\";\r\nimport React from \"react\";\r\n\r\nexport interface TextInputAndButtonOptions extends TextInputOptions {\r\n    buttonContent?: string;\r\n    onClick?: (text: string) => boolean | void;\r\n}\r\n\r\nexport class TextInputAndButton extends Component<TextInputAndButtonOptions> {\r\n    textInput = createRef<TextInput>();\r\n\r\n    onClick() {\r\n        if (this.props.onClick?.(this.textInput.current?.state.value ?? \"\"))\r\n            this.textInput.current?.setState({ value: \"\" });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"text-input-and-button\">\r\n                <TextInput {...this.props} ref={this.textInput} onEnter={() => this.onClick()} />\r\n                <button type=\"button\" onClick={() => this.onClick()}>\r\n                    {this.props.buttonContent}\r\n                </button >\r\n            </div>\r\n        );\r\n    }\r\n}","import React, { Component } from \"react\";\r\nimport { ConversationDto } from \"../Service/chat\";\r\nimport { proxy } from \"../Service/proxy\";\r\n\r\nexport class ConversationCard extends Component<{\r\n    conversation: ConversationDto,\r\n    selected: boolean,\r\n    onSelect: () => void\r\n}> {\r\n    render() {\r\n        let lastMessage = this.props.conversation.lastMessages.length > 0 ?\r\n            this.props.conversation.lastMessages[this.props.conversation.lastMessages.length - 1] : null;\r\n\r\n        return (\r\n            <div className={\"conversation-card\" + this.props.selected ? \" selected\" : \"\"}\r\n                onClick={() => this.props.onSelect()}>\r\n                <div className=\"row\">\r\n                    <span className=\"channel-name\">{this.props.conversation.name}</span>\r\n                    <span className=\"time\">{lastMessage && new Date(lastMessage.timeStamp).toLocaleDateString()}</span>\r\n                </div>\r\n                <span className=\"last-message\">{lastMessage?.content}</span>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    componentDidMount() {\r\n        proxy.addEventListener(\"message\", (cid, m) => {\r\n            if(cid === this.props.conversation.channelId)\r\n                this.forceUpdate();\r\n        }, this);\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        proxy.removeAllEventListener(this)\r\n    }\r\n}","import React, { Component } from \"react\";\r\nimport { InboxDto, ConversationDto } from \"../Service/chat\";\r\nimport { TextInputAndButton } from \"../Controller/TextInputAndButton\";\r\nimport { proxy } from \"../Service/proxy\";\r\nimport { ConversationCard } from \"./ConversationCard\";\r\n\r\nexport class LeftPane extends Component<{\r\n    inbox: InboxDto,\r\n    selectedConversation: ConversationDto | undefined,\r\n    onSelect: (c: ConversationDto) => void\r\n}> {\r\n    render() {\r\n        return (\r\n            <div className=\"left-pane\">\r\n                <p className=\"my-tag\">My tag: {this.props.inbox.user.tag}</p>\r\n                <TextInputAndButton type=\"text\" placeholder=\"Add user by Tag (Name#123)\"\r\n                    buttonContent=\"Invite\" onClick={text => this.sendContactRequest(text)} />\r\n                <div className=\"conversations\">\r\n                    {this.props.inbox.conversations.map(x =>\r\n                        <ConversationCard key={x.channelId}\r\n                            conversation={x}\r\n                            selected={x === this.props.selectedConversation}\r\n                            onSelect={() => this.props.onSelect(x)}\r\n                        />)\r\n                    }\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    sendContactRequest(email: string): boolean {\r\n        proxy.sendPackage({ type: \"contactRequest\", email, firstMessage: \"H: Hello\" });\r\n        return true;\r\n    }\r\n\r\n    componentDidMount() {\r\n        proxy.addEventListener(\"conversation\", c => this.forceUpdate(), this);\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        proxy.removeAllEventListener(this);\r\n    }\r\n}","import React, { PureComponent } from \"react\";\r\nimport { MessageDto } from \"../Service/chat\";\r\n\r\n\r\nexport class MessageCard extends PureComponent<{ message: MessageDto, own: boolean }> {\r\n    render() {\r\n        return (\r\n            <div className={\"message-card\" + (this.props.own ? \" own\" : \"\")}>\r\n                <div className=\"bubble\">\r\n                    <span className=\"text\">{this.props.message.content}</span>\r\n                    <span className=\"time\">\r\n                        {new Date(this.props.message.timeStamp).toLocaleTimeString()}\r\n                    </span>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}","import React, { Component } from \"react\";\r\nimport { ConversationDto } from \"../Service/chat\";\r\nimport { proxy } from \"../Service/proxy\";\r\nimport { TextInputAndButton } from \"../Controller/TextInputAndButton\";\r\nimport { MessageCard } from \"./MessageCard\";\r\n\r\nexport class RightPane extends Component<{\r\n    conversation?: ConversationDto,\r\n    onBack: () => void\r\n}> {\r\n    componentDidMount() {\r\n        proxy.addEventListener(\"message\", (cid, m) => {\r\n            if (cid === this.props.conversation?.channelId)\r\n                this.forceUpdate();\r\n        }, this);\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        proxy.removeAllEventListener(this);\r\n    }\r\n\r\n    onSend(text: string) {\r\n        proxy.sendPackage({\r\n            type: \"message\", channelId: this.props.conversation!.channelId,\r\n            referenceTo: 0, contentType: 0, content: \"H: \" + text\r\n        });\r\n\r\n        return true;\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"right-pane column\">\r\n                {this.props.conversation &&\r\n                    <>\r\n                        <div className=\"conversation-header row\">\r\n                            <button type=\"button\" className=\"only-narrow\" onClick={() => this.props.onBack()}>Back</button>\r\n                            <p>{this.props.conversation?.name}</p>\r\n                        </div>\r\n                        <div className=\"messages\">\r\n                            {this.props.conversation?.lastMessages.map(x =>\r\n                                <MessageCard key={x.id} message={x} own={x.senderId === proxy.inbox?.user.id} />)}\r\n                        </div>\r\n                        <div className=\"send-message row\">\r\n                            <TextInputAndButton type=\"text\" placeholder=\"Type something awesome here...\" buttonContent=\"Send\" onClick={x => this.onSend(x)} />\r\n                        </div>\r\n                    </>\r\n                }\r\n            </div>);\r\n    }\r\n}","import React, { Component } from \"react\";\r\n\r\nimport { ConversationDto } from \"../Service/chat\";\r\nimport { proxy } from \"../Service/proxy\";\r\nimport { LeftPane } from \"./LeftPane\";\r\nimport {RightPane} from \"./RightPane\"\r\n\r\nexport class Main extends Component {\r\n    state = { selectedConversation: undefined as (ConversationDto | undefined) };\r\n    render() {\r\n        return (\r\n            <div className={\"main row \" + (this.state.selectedConversation? \"right\": \"left\")}>\r\n                <LeftPane\r\n                    inbox={proxy.inbox!}\r\n                    selectedConversation={this.state.selectedConversation}\r\n                    onSelect={c => this.setState({ selectedConversation: c })} />\r\n                <RightPane conversation={this.state.selectedConversation} onBack={() => this.setState({selectedConversation: undefined})} />\r\n            </div>\r\n        )\r\n    }\r\n}","import React, { Component } from 'react';\nimport './App.css';\n\nimport { Login } from './Login/Login';\nimport { Main } from './Main/Main';\nimport { proxy } from './Service/proxy';\n\nexport default class App extends Component {\n  state = { loggedIn: false };\n\n  render() {\n    return (\n      <div className=\"App\">\n        {this.state.loggedIn ? <Main /> : <Login />}\n      </div>\n    );\n  }\n\n  componentDidMount() {\n    proxy.addEventListener(\"login\", ()=> {\n      this.setState({loggedIn: true});\n    });\n  }\n\n  componentWillUnmount() {\n    proxy.removeAllEventListener(this);\n  }\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}